name: Deploy Lambda to AWS
on:
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string
      lambda-handler:
        required: false
        type: string

defaults:
  run:
    shell: bash
    working-directory: 'src'

jobs:
  npm-build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    environment: ${{ inputs.environment-name }}

    name: Node ${{ matrix.node-version }} build and deploy
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          cache-dependency-path: '**/package-lock.json'
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Run npm install
        run: npm i --only=prod

      - name: zip up the folder
        run: npm run zip

      - name: Upload Zip File for Downstream Use
        uses: actions/upload-artifact@v3
        with:
          name: function.zip
          path: ${{ github.workspace }}/src/function.zip
          retention-days: 7
          if-no-files-found: error


# ----------------------------- #

  aws-deploy:
    needs: npm-build-deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]

    environment: ${{ inputs.environment-name }}

    env:
      LAMBDA_FUNCTION_NAME: ${{ join([vars.LAMBDA_FUNCTION_NAME, inputs.environment-name], '-') }}
      LAMBDA_EXECUTION_ROLE: ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN }}
      LAMBDA_RUNTIME: nodejs${{ matrix.node-version }}.x
      LAMBDA_HANDLER: ${{ inputs.lambda-handler }}

    permissions:
      id-token: write
      contents: read

    name: Deploy to AWS - ${{ inputs.environment-name }} - nodejs ${{ matrix.node-version }} 
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Download a single artifact
        uses: actions/download-artifact@v3
        id: download-artifact
        with:
          name: function.zip
          path: ${{ github.workspace }}/src
      
      - name: List ZIP contents
        run: unzip -l ${{ steps.download-artifact.outputs.download-path }}/function.zip

      # https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 900 # minimum is 15 minutes
          mask-aws-account-id: true
      
      - name: Create or Update Lambda
        id: createLambda
        continue-on-error: true
        run: bash -ex ../.ci/deploy-lambda.bash
      
      - name: Get Lambda Status
        run: |
          aws lambda get-function-configuration \
            --function-name ${LAMBDA_FUNCTION_NAME}

      - name: Update Lambda function Metadata
        run: bash -ex ../.ci/deploy-lambda.bash update-metadata
        env:
          LAMBDA_ENV_VARS: POSTFIX_DYNAMODB_TABLE=${{ secrets.POSTFIX_DYNAMODB_TABLE }}
